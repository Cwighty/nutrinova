// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NutrinovaData.UnitTests.Features.Nutrients
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NutrientMatcher")]
    public partial class NutrientMatcherFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "NutrientMatcher.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Nutrients", "NutrientMatcher", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nutrient Matches are Identified for Inconsistent Data")]
        [NUnit.Framework.CategoryAttribute("NutrientMatching")]
        [NUnit.Framework.TestCaseAttribute("Energy (Atwater General Factors)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Energy (Atwater Specific Factors)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("Alcohol, ethyl", "26", null)]
        [NUnit.Framework.TestCaseAttribute("Carbohydrate, by summation", "4", null)]
        [NUnit.Framework.TestCaseAttribute("Total fat (NLEA)", "3", null)]
        [NUnit.Framework.TestCaseAttribute("Fatty acids, total trans", "8", null)]
        [NUnit.Framework.TestCaseAttribute("Fatty acids, total saturated", "7", null)]
        [NUnit.Framework.TestCaseAttribute("Sugars, Total", "6", null)]
        [NUnit.Framework.TestCaseAttribute("Sugars, Total NLEA", "6", null)]
        [NUnit.Framework.TestCaseAttribute("Vitamin C, total ascorbic acid", "11", null)]
        [NUnit.Framework.TestCaseAttribute("Vitamin B-6, N411 + N412 +N413", "15", null)]
        [NUnit.Framework.TestCaseAttribute("Low Molecular Weight Dietary Fiber (LMWDF)", "5", null)]
        public void NutrientMatchesAreIdentifiedForInconsistentData(string importedDescription, string expectedNutrientId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "NutrientMatching"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ImportedDescription", importedDescription);
            argumentsOfScenario.Add("ExpectedNutrientId", expectedNutrientId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nutrient Matches are Identified for Inconsistent Data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("The description of an imported nutrient is {0}", importedDescription), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Description"});
                table1.AddRow(new string[] {
                            "1",
                            "Energy (Calories)"});
                table1.AddRow(new string[] {
                            "2",
                            "Protein"});
                table1.AddRow(new string[] {
                            "3",
                            "Total Fat"});
                table1.AddRow(new string[] {
                            "4",
                            "Carbohydrate"});
                table1.AddRow(new string[] {
                            "5",
                            "Dietary Fiber"});
                table1.AddRow(new string[] {
                            "6",
                            "Sugars"});
                table1.AddRow(new string[] {
                            "7",
                            "Saturated Fat"});
                table1.AddRow(new string[] {
                            "8",
                            "Trans Fat"});
                table1.AddRow(new string[] {
                            "9",
                            "Cholesterol"});
                table1.AddRow(new string[] {
                            "10",
                            "Vitamin A"});
                table1.AddRow(new string[] {
                            "11",
                            "Vitamin C"});
                table1.AddRow(new string[] {
                            "12",
                            "Vitamin D"});
                table1.AddRow(new string[] {
                            "13",
                            "Vitamin E"});
                table1.AddRow(new string[] {
                            "14",
                            "Vitamin K"});
                table1.AddRow(new string[] {
                            "15",
                            "Vitamin B6"});
                table1.AddRow(new string[] {
                            "16",
                            "Vitamin B12"});
                table1.AddRow(new string[] {
                            "17",
                            "Folate"});
                table1.AddRow(new string[] {
                            "18",
                            "Calcium"});
                table1.AddRow(new string[] {
                            "19",
                            "Iron"});
                table1.AddRow(new string[] {
                            "20",
                            "Magnesium"});
                table1.AddRow(new string[] {
                            "21",
                            "Potassium"});
                table1.AddRow(new string[] {
                            "22",
                            "Sodium"});
                table1.AddRow(new string[] {
                            "23",
                            "Zinc"});
                table1.AddRow(new string[] {
                            "24",
                            "Water"});
                table1.AddRow(new string[] {
                            "25",
                            "Caffeine"});
                table1.AddRow(new string[] {
                            "26",
                            "Alcohol"});
#line 6
 testRunner.And("We are tracking these nutrients in our system", ((string)(null)), table1, "And ");
#line hidden
#line 34
 testRunner.When("Matching the nutrient to ours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.Then(string.Format("The closest match should be {0}", expectedNutrientId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Nutrients that should not match")]
        [NUnit.Framework.TestCaseAttribute("Total sugar alcohols", null)]
        [NUnit.Framework.TestCaseAttribute("Retinol", null)]
        [NUnit.Framework.TestCaseAttribute("25-hydroxycholecalciferol", null)]
        [NUnit.Framework.TestCaseAttribute("Tocopherol, beta", null)]
        [NUnit.Framework.TestCaseAttribute("Vitamin D2", null)]
        public void NutrientsThatShouldNotMatch(string importedDescription, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ImportedDescription", importedDescription);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Nutrients that should not match", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
 testRunner.Given(string.Format("The description of an imported nutrient is {0}", importedDescription), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Description"});
                table2.AddRow(new string[] {
                            "1",
                            "Energy (Calories)"});
                table2.AddRow(new string[] {
                            "2",
                            "Protein"});
                table2.AddRow(new string[] {
                            "3",
                            "Total Fat"});
                table2.AddRow(new string[] {
                            "4",
                            "Carbohydrate"});
                table2.AddRow(new string[] {
                            "5",
                            "Dietary Fiber"});
                table2.AddRow(new string[] {
                            "6",
                            "Sugars"});
                table2.AddRow(new string[] {
                            "7",
                            "Saturated Fat"});
                table2.AddRow(new string[] {
                            "8",
                            "Trans Fat"});
                table2.AddRow(new string[] {
                            "9",
                            "Cholesterol"});
                table2.AddRow(new string[] {
                            "10",
                            "Vitamin A"});
                table2.AddRow(new string[] {
                            "11",
                            "Vitamin C"});
                table2.AddRow(new string[] {
                            "12",
                            "Vitamin D"});
                table2.AddRow(new string[] {
                            "13",
                            "Vitamin E"});
                table2.AddRow(new string[] {
                            "14",
                            "Vitamin K"});
                table2.AddRow(new string[] {
                            "15",
                            "Vitamin B6"});
                table2.AddRow(new string[] {
                            "16",
                            "Vitamin B12"});
                table2.AddRow(new string[] {
                            "17",
                            "Folate"});
                table2.AddRow(new string[] {
                            "18",
                            "Calcium"});
                table2.AddRow(new string[] {
                            "19",
                            "Iron"});
                table2.AddRow(new string[] {
                            "20",
                            "Magnesium"});
                table2.AddRow(new string[] {
                            "21",
                            "Potassium"});
                table2.AddRow(new string[] {
                            "22",
                            "Sodium"});
                table2.AddRow(new string[] {
                            "23",
                            "Zinc"});
                table2.AddRow(new string[] {
                            "24",
                            "Water"});
                table2.AddRow(new string[] {
                            "25",
                            "Caffeine"});
                table2.AddRow(new string[] {
                            "26",
                            "Alcohol"});
#line 54
 testRunner.And("We are tracking these nutrients in our system", ((string)(null)), table2, "And ");
#line hidden
#line 82
 testRunner.When("Matching the nutrient to ours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.Then("Matching throws error \"No match found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
